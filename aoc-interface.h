/**
 * Copyright 2020-2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \file aoc-interface.h
 *
 * Autogenerated AoC interface matching AoC source code
 * associated with the following source code:
 *
 *   hash: 186bd992357c0752b197473a4b9addf224f727a7 (MODIFIED)
 *
 * DO NOT MODIFY THIS FILE
 *
 */

#ifndef AOC_INTERFACE_H_
#define AOC_INTERFACE_H_


#ifdef __KERNEL__
  #include <linux/kernel.h>
#else
  #include <stdint.h>
#endif


/**
 * System timer tick [hz].  All time counts will be based on tick running at this frequency.
 *
 * UUID: 6ff8a9e0249904d2059bb069dfcd5357
 */
#define AOC_TIMER_FREQUENCY 4096000


/**
 * List of supported commands.
 */
enum AOC_COMMAND {
  CMD_RING_BIND_ID = 5, /* ->  struct CMD_RING_BIND */
  CMD_SYS_BANNER_ID = 6, /* ->  struct CMD_CORE_GENERIC */
  CMD_SYS_STATS_TOT_ID = 7, /* ->  struct CMD_SYS_STATS_TOT */
  CMD_SYS_STATS_INFO_GET_ID = 8, /* ->  struct CMD_SYS_STATS_INFO_GET */
  CMD_SYS_STATS_TIMED_GET_ID = 9, /* ->  struct CMD_SYS_STATS_TIMED_GET */
  CMD_SYS_STATS_DATA_GET_ID = 10, /* ->  struct CMD_SYS_STATS_DATA_GET */
  CMD_SYS_STATS_ID = 11, /* ->  struct CMD_CORE_GENERIC */
  CMD_SYS_LOGIC_TRACE_ENABLE_ID = 12, /* ->  struct CMD_ENABLE */
  CMD_SYS_LOGIC_TRACE_SCHEME_SET_ID = 13, /* ->  struct CMD_CORE_LOGIC_TRACE_SCHEME */
  CMD_SYS_LOGIC_TRACE_SCHEME_GET_ID = 14, /* ->  struct CMD_CORE_LOGIC_TRACE_SCHEME */
  CMD_DBG_WATCHDOG_TRIGGER_ID = 15, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_TREE_ID = 16, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_INFO_ID = 17, /* ->  struct CMD_DBG_INFO */
  CMD_DBG_HEAP_ID = 18, /* ->  struct CMD_DBG_HEAP */
  CMD_DBG_LEVEL_GET_ID = 20, /* ->  struct CMD_DBG_LEVEL_GET */
  CMD_DBG_CONTROLLERS_ID = 21, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_FILTERS_ID = 22, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_PIPES_ID = 23, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_POOLS_ID = 24, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_RINGS_ID = 25, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_IPCS_ID = 26, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_FSM_ID = 27, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_TASKS_ID = 28, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_POWERMAN_ID = 29, /* ->  struct CMD_DBG_POWERMAN */
  CMD_DBG_TIMER_ID = 30, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_LOG_ID = 31, /* ->  struct CMD_DBG_LOG */
  CMD_DBG_TIMESTAMP_ID = 32, /* ->  struct CMD_ENABLE */
  CMD_DBG_INTCNTRL_ID = 33, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_IPC_SPACES_ID = 34, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_IPC_CHANNELS_ID = 35, /* ->  struct CMD_CORE_GENERIC */
  CMD_DBG_MEM_SET_ID = 36, /* ->  struct CMD_DBG_MEM_SET */
  CMD_DBG_MEM_DUMP_ID = 37, /* ->  struct CMD_DBG_MEM_DUMP */
  CMD_IPC_NOTIF_ENABLE_ID = 38, /* ->  struct CMD_IPC_NOTIF_ENABLE */
  CMD_AUDIO_OUTPUT_SINK_ID = 39, /* ->  struct CMD_AUDIO_OUTPUT_SINK */
  CMD_AUDIO_OUTPUT_SOURCE_ID = 40, /* ->  struct CMD_AUDIO_OUTPUT_SOURCE */
  CMD_AUDIO_OUTPUT_BIND_ID = 41, /* ->  struct CMD_AUDIO_OUTPUT_BIND */
  CMD_AUDIO_INPUT_MIC_POWER_ON_ID = 42, /* ->  struct CMD_AUDIO_INPUT_MIC_POWER_ON */
  CMD_AUDIO_OUTPUT_WAV_PLAYBACK_ID = 42, /* ->  struct CMD_AUDIO_OUTPUT_WAV_PLAYBACK */
  CMD_AUDIO_INPUT_MIC_POWER_OFF_ID = 43, /* ->  struct CMD_AUDIO_INPUT_MIC_POWER_OFF */
  CMD_AUDIO_OUTPUT_GAIN_ID = 43, /* ->  struct CMD_AUDIO_OUTPUT_GAIN */
  CMD_AUDIO_INPUT_MIC_GET_POWER_STATE_ID = 44, /* ->  struct CMD_AUDIO_INPUT_MIC_GET_POWER_STATE */
  CMD_AUDIO_OUTPUT_FX_EQ_ID = 44, /* ->  struct CMD_AUDIO_OUTPUT_FX_EQ */
  CMD_AUDIO_INPUT_HOTWORD_ENABLE_AEC_ID = 45, /* ->  struct CMD_HDR */
  CMD_AUDIO_OUTPUT_EP_SETUP_ID = 45, /* ->  struct CMD_AUDIO_OUTPUT_EP_SETUP */
  CMD_AUDIO_INPUT_HOTWORD_DISABLE_AEC_ID = 46, /* ->  struct CMD_HDR */
  CMD_AUDIO_OUTPUT_DECODE_ID = 46, /* ->  struct CMD_AUDIO_OUTPUT_DECODE */
  CMD_AUDIO_OUTPUT_AEC_NOTIFY_ID = 47, /* ->  struct CMD_AUDIO_OUTPUT_AEC_NOTIFY */
  CMD_AUDIO_OUTPUT_SET_PARAMETER_ID = 48, /* ->  struct CMD_AUDIO_OUTPUT_SET_PARAMETER */
  CMD_AUDIO_OUTPUT_SET_PARAMETER_BULK_ID = 49, /* ->  struct CMD_AUDIO_OUTPUT_SET_PARAMETER_BULK */
  CMD_AUDIO_OUTPUT_GET_PARAMETER_ID = 50, /* ->  struct CMD_AUDIO_OUTPUT_GET_PARAMETER */
  CMD_AUDIO_OUTPUT_GET_PARAMETER_BULK_ID = 51, /* ->  struct CMD_AUDIO_OUTPUT_GET_PARAMETER_BULK */
  CMD_AUDIO_OUTPUT_SET_GET_PARAM_BULK_ID = 52, /* ->  struct CMD_AUDIO_OUTPUT_SET_GET_PARAM_BULK */
  CMD_AUDIO_INPUT_BT_CAPTURE_START_ID = 53, /* ->  struct CMD_HDR */
  CMD_AUDIO_OUTPUT_RESYNC_AUDIO_SINK_ID = 53, /* ->  struct CMD_AUDIO_OUTPUT_RESYNC_AUDIO_SINK */
  CMD_AUDIO_INPUT_BT_CAPTURE_STOP_ID = 54, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_BT_DECODER_START_ID = 55, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_BT_DECODER_STOP_ID = 56, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_BT_DECODER_ENABLE_OUTPUT_ID = 57, /* ->  struct CMD_AUDIO_INPUT_BT_ENABLE_OUTPUT */
  CMD_AUDIO_INPUT_BT_DECODER_DISABLE_OUTPUT_ID = 58, /* ->  struct CMD_AUDIO_INPUT_BT_DISABLE_OUTPUT */
  CMD_AUDIO_INPUT_IN_CALL_SELECT_START_ID = 59, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_IN_CALL_SELECT_STOP_ID = 60, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_IN_CALL_SELECT_ENABLE_OUTPUT_ID = 61, /* ->  struct CMD_AUDIO_INPUT_IN_CALL_SELECT_ENABLE_OUTPUT */
  CMD_AUDIO_INPUT_IN_CALL_SELECT_DISABLE_OUTPUT_ID = 62, /* ->  struct CMD_AUDIO_INPUT_IN_CALL_SELECT_DISABLE_OUTPUT */
  CMD_AUDIO_INPUT_MIC_RECORD_AP_SET_PARAMS_ID = 63, /* ->  struct CMD_AUDIO_INPUT_MIC_RECORD_AP_SET_PARAMS */
  CMD_AUDIO_OUTPUT_CFG_HAPTICS_ID = 63, /* ->  struct CMD_AUDIO_OUTPUT_CFG_HAPTICS */
  CMD_AUDIO_INPUT_MIC_RECORD_AP_START_ID = 64, /* ->  struct CMD_HDR */
  CMD_AUDIO_OUTPUT_CFG_SIGGEN_ID = 64, /* ->  struct CMD_AUDIO_OUTPUT_CFG_SIGGEN */
  CMD_AUDIO_INPUT_MIC_RECORD_AP_STOP_ID = 65, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_HOTWORD_START_ID = 66, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_HOTWORD_STOP_ID = 67, /* ->  struct CMD_HDR */
  CMD_AUDIO_INPUT_MIC_LOOPBACK_START_ID = 68, /* ->  struct CMD_AUDIO_INPUT_ENABLE_MIC_LOOPBACK */
  CMD_AUDIO_INPUT_MIC_LOOPBACK_STOP_ID = 69, /* ->  struct CMD_HDR */
};

/**
 * List of available notifications.
 */
enum AOC_NOTIFICATION {
  NOTIF_AUDIO_INPUT_AP_MIC_RECORD_DATA_AVAILABLE_ID = 2, /* ->  struct NOTIF */
};

enum DATA_TYPE {
  DATA_TYPE_CMD = 0,
  DATA_TYPE_NOTIF,
  DATA_TYPE_SIGNAL,
  DATA_TYPE_MSG,
};

struct CONTAINER_HDR {
  uint8_t type; /* For valid values, refer to "enum DATA_TYPE" */
  uint8_t cntr;
  uint16_t len;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_HOTWORD_ENABLE_AEC_ID, UUID: 5bcb61ee84929d5bf53957968cdad957
 *   CMD_AUDIO_INPUT_HOTWORD_DISABLE_AEC_ID, UUID: dad78a1c8f2eac50ec71fb188639b417
 *   CMD_AUDIO_INPUT_BT_CAPTURE_START_ID, UUID: 7a8d667b9917f2c7583de006d7b6dd40
 *   CMD_AUDIO_INPUT_BT_CAPTURE_STOP_ID, UUID: 7ef72e02c10909a592a32ef48202e5b5
 *   CMD_AUDIO_INPUT_BT_DECODER_START_ID, UUID: 367f8e215b9af155d8fcd7b1633a3be8
 *   CMD_AUDIO_INPUT_BT_DECODER_STOP_ID, UUID: 9b54a55a6752b4d17df889ad5a1cece4
 *   CMD_AUDIO_INPUT_IN_CALL_SELECT_START_ID, UUID: d66120ba451528766e3656079365e083
 *   CMD_AUDIO_INPUT_IN_CALL_SELECT_STOP_ID, UUID: 8129ef7d8d52ff7436c261f3291c1a84
 *   CMD_AUDIO_INPUT_MIC_RECORD_AP_START_ID, UUID: d5a3326691d56496760b9005b6ad9e70
 *   CMD_AUDIO_INPUT_MIC_RECORD_AP_STOP_ID, UUID: 559eff09b11d37c9b6a282ddd9e9c7b7
 *   CMD_AUDIO_INPUT_HOTWORD_START_ID, UUID: 41aa1cdd58f625743481fba3b60525f6
 *   CMD_AUDIO_INPUT_HOTWORD_STOP_ID, UUID: b421dc50c6c27f9178948f67784c8070
 *   CMD_AUDIO_INPUT_MIC_LOOPBACK_STOP_ID, UUID: 611578195ce87633ec899869a4716b48
 */
struct CMD_HDR {
  struct CONTAINER_HDR parent;
  uint16_t id;
  int16_t reply;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_BANNER_ID, UUID: 43edff9a17f04b214f00ebe1138e4b3c
 *   CMD_SYS_STATS_ID, UUID: 4fbaf1d1e021719d3dde8433b4481e55
 *   CMD_DBG_WATCHDOG_TRIGGER_ID, UUID: 0b0c4177055541fb831baba58e536b47
 *   CMD_DBG_TREE_ID, UUID: b91615a00e45ebe6c9ca5e3d035dcad8
 *   CMD_DBG_CONTROLLERS_ID, UUID: 95006b36781e8330df76b27ddab36a2b
 *   CMD_DBG_FILTERS_ID, UUID: 2a3661765c52210618059522ba0e31f2
 *   CMD_DBG_PIPES_ID, UUID: 3ca6be15c807871e2f6272ad79e99c69
 *   CMD_DBG_POOLS_ID, UUID: 3fed661e64b3e40512eb478499d48c3d
 *   CMD_DBG_RINGS_ID, UUID: 2651c06f1a786a1d73eacd36844b32b1
 *   CMD_DBG_IPCS_ID, UUID: 3a5d2855d3f81ba06e4013b4209edf4a
 *   CMD_DBG_FSM_ID, UUID: 726522d75f3a82c23e44be70c92738cf
 *   CMD_DBG_TASKS_ID, UUID: 209c6693eccfe276927d472c03596a1a
 *   CMD_DBG_TIMER_ID, UUID: 533c02d864b889516f5bab76e69db954
 *   CMD_DBG_INTCNTRL_ID, UUID: cf074ce30f090fdbea26bda00bfbe686
 *   CMD_DBG_IPC_SPACES_ID, UUID: 5d0463450fd512be605db6b7ec4f7d41
 *   CMD_DBG_IPC_CHANNELS_ID, UUID: 7064f6f5d37a7540a266c307fdad0a99
 */
struct CMD_CORE_GENERIC {
  struct CMD_HDR parent;
  int32_t core;
} __attribute__((packed));

enum DbgHeapMode {
  DBG_HEAP_NONE = 0,
  DBG_HEAP_TRACE,
  DBG_HEAP_CRC_INFO,
  DBG_HEAP_CRC,
};

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_HEAP_ID, UUID: 8bcead8efaa3b8784d1d2c06e5f72b40
 */
struct CMD_DBG_HEAP {
  struct CMD_CORE_GENERIC parent;
  uint32_t crc;
  uint8_t mode; /* For valid values, refer to "enum DbgHeapMode" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_RING_BIND_ID, UUID: 83c7fd9ba41a12ead4920ddbe02ce8fb
 */
struct CMD_RING_BIND {
  struct CMD_HDR parent;
  int32_t pin;
  uint16_t ipc_tag;
  uint32_t write_descr;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_IPC_NOTIF_ENABLE_ID, UUID: 52c0ef3759bd0e93353bbc3b6ded4acf
 */
struct CMD_IPC_NOTIF_ENABLE {
  struct CMD_HDR parent;
  uint32_t tag;
  uint8_t enable;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_STATS_TOT_ID, UUID: 89c5ed53ae5d03752635968f20f4cdac
 */
struct CMD_SYS_STATS_TOT {
  struct CMD_CORE_GENERIC parent;
  int32_t tot;
} __attribute__((packed));

enum STATS_TYPE {
  STATS_TYPE_TIMED_STATUS = 0,
  STATS_TYPE_DATA_TRANSFER,
};

#define STATS_ENTRY_LEN (7) /* UUID: 733b57b1d8a9342523a49b8c37ad2d0a */

struct STATS_ENTRY_INFO {
  char name[STATS_ENTRY_LEN];
  uint8_t type; /* For valid values, refer to "enum STATS_TYPE" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_STATS_INFO_GET_ID, UUID: 67820951d86f53b0e3192b703a86eab1
 */
struct CMD_SYS_STATS_INFO_GET {
  struct CMD_CORE_GENERIC parent;
  int32_t index;
  struct STATS_ENTRY_INFO info;
} __attribute__((packed));

struct STATS_TIMED_STATUS {
  uint64_t counter;
  uint64_t cumulative_time;
  uint64_t timestamp_enter_last;
  uint64_t timestamp_exit_last;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_STATS_TIMED_GET_ID, UUID: 180363ae9bed7e0721387482230afd74
 */
struct CMD_SYS_STATS_TIMED_GET {
  struct CMD_CORE_GENERIC parent;
  int32_t index;
  struct STATS_TIMED_STATUS timed;
} __attribute__((packed));

struct STATS_DATA_TRANSFER {
  uint64_t counter;
  uint64_t counter_failed;
  uint64_t transfer_tx;
  uint64_t transfer_rx;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_STATS_DATA_GET_ID, UUID: 098ae9752b988feaeab6e21a86eac464
 */
struct CMD_SYS_STATS_DATA_GET {
  struct CMD_CORE_GENERIC parent;
  int32_t index;
  struct STATS_DATA_TRANSFER transfer;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_LOGIC_TRACE_ENABLE_ID, UUID: 4de029332f3e41e7f4cf5afc2840212f
 *   CMD_DBG_TIMESTAMP_ID, UUID: 795014994a189971558849872cb30ad4
 */
struct CMD_ENABLE {
  struct CMD_CORE_GENERIC parent;
  uint8_t enable;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_SYS_LOGIC_TRACE_SCHEME_SET_ID, UUID: 9e3c06edcc10e09a28e4aadb815e24af
 *   CMD_SYS_LOGIC_TRACE_SCHEME_GET_ID, UUID: f562460d3f81d165b95b6f335defb60f
 */
struct CMD_CORE_LOGIC_TRACE_SCHEME {
  struct CMD_CORE_GENERIC parent;
  int8_t scheme;
} __attribute__((packed));

#define EFWObject_kNameSize (16) /* UUID: 7488eddabe0654e3f0ac58cda17a1530 */

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_INFO_ID, UUID: 16309b666d226baf0bacc20541fe0ac7
 */
struct CMD_DBG_INFO {
  struct CMD_CORE_GENERIC parent;
  char string[EFWObject_kNameSize];
  uint8_t system;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_LEVEL_GET_ID, UUID: 42d098d939911dd555133cdc3e647ee4
 */
struct CMD_DBG_LEVEL_GET {
  struct CMD_CORE_GENERIC parent;
  char string[EFWObject_kNameSize];
  uint8_t system;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_POWERMAN_ID, UUID: 518f707d7bcea84577e6137683508c4e
 */
struct CMD_DBG_POWERMAN {
  struct CMD_CORE_GENERIC parent;
  uint8_t standby_modify;
  uint8_t standby_on;
  uint8_t retention_modify;
  uint8_t retention_on;
  uint8_t shutdown_modify;
  uint8_t shutdown_on;
  uint8_t status;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_LOG_ID, UUID: 262e83bb0f9dcab327c587754edb5a05
 */
struct CMD_DBG_LOG {
  struct CMD_CORE_GENERIC parent;
  uint8_t reset;
  uint8_t marker;
} __attribute__((packed));

enum DbgMemMode {
  DBG_MEM_MODE_32 = 0,
  DBG_MEM_MODE_16,
  DBG_MEM_MODE_8,
  DBG_MEM_MODE_RANGE,
};

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_MEM_SET_ID, UUID: 4aadde3811f0ebc824e4408e102f3077
 */
struct CMD_DBG_MEM_SET {
  struct CMD_CORE_GENERIC parent;
  uint32_t address;
  uint32_t value;
  uint8_t mode; /* For valid values, refer to "enum DbgMemMode" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_DBG_MEM_DUMP_ID, UUID: df122479685551ec11c0e9d027251a2e
 */
struct CMD_DBG_MEM_DUMP {
  struct CMD_CORE_GENERIC parent;
  uint32_t address;
  uint32_t size;
} __attribute__((packed));

enum BTDecoderOutputIndex {
  BT_MODEM_OUTPUT_INDEX = 0,
  BT_AP_OUTPUT_INDEX,
  BT_HOTWORD_OUTPUT_INDEX,
  BT_DECODER_NUM_OUTPUTS,
};

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_BT_DECODER_ENABLE_OUTPUT_ID, UUID: bf84e2bca72f62c6370a1f026cfd0e35
 */
struct CMD_AUDIO_INPUT_BT_ENABLE_OUTPUT {
  struct CMD_HDR parent;
  uint8_t output_index; /* For valid values, refer to "enum BTDecoderOutputIndex" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_BT_DECODER_DISABLE_OUTPUT_ID, UUID: e77e8e207202f6095dc735296f6c17af
 */
struct CMD_AUDIO_INPUT_BT_DISABLE_OUTPUT {
  struct CMD_HDR parent;
  uint8_t output_index; /* For valid values, refer to "enum BTDecoderOutputIndex" */
} __attribute__((packed));

enum InCallSelectOutputIndex {
  IN_CALL_SELECT_MODEM_IN_OUTPUT_INDEX = 0,
  IN_CALL_SELECT_MODEM_TX_OUTPUT_INDEX,
  IN_CALL_SELECT_NUM_OUTPUTS,
};

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_IN_CALL_SELECT_ENABLE_OUTPUT_ID, UUID: 41d0013e624f5c6794a0f45658a07c4f
 */
struct CMD_AUDIO_INPUT_IN_CALL_SELECT_ENABLE_OUTPUT {
  struct CMD_HDR parent;
  uint8_t output_index; /* For valid values, refer to "enum InCallSelectOutputIndex" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_IN_CALL_SELECT_DISABLE_OUTPUT_ID, UUID: 30ce5eae860ba5230660ef7381093141
 */
struct CMD_AUDIO_INPUT_IN_CALL_SELECT_DISABLE_OUTPUT {
  struct CMD_HDR parent;
  uint8_t output_index; /* For valid values, refer to "enum InCallSelectOutputIndex" */
} __attribute__((packed));

enum SampleRate {
  SR_8KHZ = 0,
  SR_16KHZ,
  SR_24KHZ,
  SR_32KHZ,
  SR_44K1HZ,
  SR_48KHZ,
  SR_96KHZ,
  SR_192KHZ,
};

enum Format {
  FRMT_FLOATING_POINT = 0,
  FRMT_FIXED_POINT,
};

enum BitsPerSample {
  WIDTH_8_BIT = 0,
  WIDTH_16_BIT,
  WIDTH_24_BIT,
  WIDTH_32_BIT,
};

enum Channels {
  CH_RESERVED = 0,
  CH_MONO,
  CH_STEREO,
  CH_3,
  CH_4,
  CH_5_1,
};

struct channelMetadataUnpacked {
  uint8_t chan; /* For valid values, refer to "enum Channels" */
  uint8_t bits; /* For valid values, refer to "enum BitsPerSample" */
  uint8_t sr; /* For valid values, refer to "enum SampleRate" */
  uint8_t format; /* For valid values, refer to "enum Format" */
  uint8_t offset;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_MIC_RECORD_AP_SET_PARAMS_ID, UUID: 358d93fdd92dc74fce25dec6ffe560e3
 */
struct CMD_AUDIO_INPUT_MIC_RECORD_AP_SET_PARAMS {
  struct CMD_HDR parent;
  struct channelMetadataUnpacked requested_format;
  uint8_t pdm_mask;
  uint8_t period_ms;
  uint8_t num_periods;
  uint8_t sample_rate; /* For valid values, refer to "enum SampleRate" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_MIC_LOOPBACK_START_ID, UUID: 95dc85879cb550ead27b271d15df0c96
 */
struct CMD_AUDIO_INPUT_ENABLE_MIC_LOOPBACK {
  struct CMD_HDR parent;
  uint8_t sample_rate; /* For valid values, refer to "enum SampleRate" */
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_MIC_POWER_ON_ID, UUID: f66bc33c61b9140843f1016d50b468c5
 */
struct CMD_AUDIO_INPUT_MIC_POWER_ON {
  struct CMD_HDR parent;
  uint8_t mic_index;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_MIC_POWER_OFF_ID, UUID: 85b918071ba730a9bfd36cd8b4a91d44
 */
struct CMD_AUDIO_INPUT_MIC_POWER_OFF {
  struct CMD_HDR parent;
  uint8_t mic_index;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_INPUT_MIC_GET_POWER_STATE_ID, UUID: bcbdf241688107ee0bf0ec9bfdaea18b
 */
struct CMD_AUDIO_INPUT_MIC_GET_POWER_STATE {
  struct CMD_HDR parent;
  uint8_t mic_index;
  uint8_t power_state;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_SINK_ID, UUID: a3e5f10bd88739e941e93b102c593eaa
 */
struct CMD_AUDIO_OUTPUT_SINK {
  struct CMD_HDR parent;
  uint8_t sink;
  uint8_t on;
  uint8_t timestamping;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_SOURCE_ID, UUID: a951b4a01f7eb033e774ac7fb7c7d5e0
 */
struct CMD_AUDIO_OUTPUT_SOURCE {
  struct CMD_HDR parent;
  uint8_t source;
  uint8_t on;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_BIND_ID, UUID: a7f48eda021a72f284eb2119d655e6bd
 */
struct CMD_AUDIO_OUTPUT_BIND {
  struct CMD_HDR parent;
  uint8_t src;
  uint8_t dst;
  uint8_t bind;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_WAV_PLAYBACK_ID, UUID: 3156c87c3218d3f5955d058df560715f
 */
struct CMD_AUDIO_OUTPUT_WAV_PLAYBACK {
  struct CMD_HDR parent;
  uint8_t sink;
  uint8_t on;
  uint32_t address;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_GAIN_ID, UUID: 313168fa2ea1c289ec76e983c25d8011
 */
struct CMD_AUDIO_OUTPUT_GAIN {
  struct CMD_HDR parent;
  uint8_t sink;
  uint8_t channel;
  uint16_t gain;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_FX_EQ_ID, UUID: 75476ce48eca1fa16853174d3e5a3a52
 */
struct CMD_AUDIO_OUTPUT_FX_EQ {
  struct CMD_HDR parent;
  uint8_t sink;
  int8_t l;
  int8_t m;
  int8_t h;
} __attribute__((packed));

struct EntrypointDescriptorUnpacked {
  uint32_t address;
  uint32_t watermark;
  uint32_t length;
  struct channelMetadataUnpacked metadata;
  uint8_t channel;
  uint8_t wraparound;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_EP_SETUP_ID, UUID: 721456c07195534dc4cbd0570e49eab4
 */
struct CMD_AUDIO_OUTPUT_EP_SETUP {
  struct CMD_HDR parent;
  struct EntrypointDescriptorUnpacked d;
  uint8_t on;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_DECODE_ID, UUID: b947fbe00944af18ee6ecac02eede964
 */
struct CMD_AUDIO_OUTPUT_DECODE {
  struct CMD_HDR parent;
  struct EntrypointDescriptorUnpacked raw_ep_descr;
  uint32_t address;
  int32_t size;
  uint8_t codec;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_AEC_NOTIFY_ID, UUID: f4eb5239e27e5b94d222cac7787c0ec7
 */
struct CMD_AUDIO_OUTPUT_AEC_NOTIFY {
  struct CMD_HDR parent;
  int32_t index;
  uint8_t on;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_RESYNC_AUDIO_SINK_ID, UUID: 9bc0d0aae8ea6571f78f8818643ec230
 */
struct CMD_AUDIO_OUTPUT_RESYNC_AUDIO_SINK {
  struct CMD_HDR parent;
  uint8_t sink;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_GET_PARAMETER_ID, UUID: d202a46174e58544093a88da00a65de8
 */
struct CMD_AUDIO_OUTPUT_GET_PARAMETER {
  struct CMD_HDR parent;
  uint8_t block;
  uint8_t component;
  uint32_t key;
  uint32_t val;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_GET_PARAMETER_BULK_ID, UUID: 04dcea0644f479e8aee33ccfa9db9140
 */
struct CMD_AUDIO_OUTPUT_GET_PARAMETER_BULK {
  struct CMD_HDR parent;
  uint8_t block;
  uint8_t component;
  uint32_t rx_offset;
  uint32_t rx_address;
  uint32_t rx_size;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_SET_PARAMETER_ID, UUID: c6822ff08277edf369c9e5dcb08d0d5c
 */
struct CMD_AUDIO_OUTPUT_SET_PARAMETER {
  struct CMD_HDR parent;
  uint8_t block;
  uint8_t component;
  uint32_t key;
  uint32_t val;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_SET_PARAMETER_BULK_ID, UUID: 1914650aa91af1bae7ccf3c84e6064e0
 */
struct CMD_AUDIO_OUTPUT_SET_PARAMETER_BULK {
  struct CMD_HDR parent;
  uint8_t block;
  uint8_t component;
  uint32_t tx_offset;
  uint32_t tx_address;
  uint32_t tx_size;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_SET_GET_PARAM_BULK_ID, UUID: 1440b2d4a9efefbcefd3a6a10e1e5a2f
 */
struct CMD_AUDIO_OUTPUT_SET_GET_PARAM_BULK {
  struct CMD_HDR parent;
  uint8_t block;
  uint8_t component;
  uint16_t tx_offset;
  uint16_t rx_offset;
  uint32_t tx_address;
  uint32_t rx_address;
  uint16_t tx_size;
  uint16_t rx_size;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_CFG_HAPTICS_ID, UUID: 3d6c7b49fd7f78e74c93790188dd4d34
 */
struct CMD_AUDIO_OUTPUT_CFG_HAPTICS {
  struct CMD_HDR parent;
  uint8_t enable_haptics;
} __attribute__((packed));

/**
 * Structure associated with the following commands:
 *
 *   CMD_AUDIO_OUTPUT_CFG_SIGGEN_ID, UUID: 495d169cc2304981612c0a788fa7b872
 */
struct CMD_AUDIO_OUTPUT_CFG_SIGGEN {
  struct CMD_HDR parent;
  uint8_t wf_type;
  uint16_t wf_period;
  uint32_t wf_amplitude;
} __attribute__((packed));

struct NOTIF_HDR {
  struct CONTAINER_HDR parent;
  uint32_t id;
  uint32_t tag;
} __attribute__((packed));

#define notif_payload (36) /* UUID: 21377ce718fd3e9bec883f8fb476c056 */

/**
 * Structure associated with the following notifications:
 *
 *   NOTIF_AUDIO_INPUT_AP_MIC_RECORD_DATA_AVAILABLE_ID, UUID: 29ff3e76c33148ccdfd493c21f77f8b3
 */
struct NOTIF {
  struct NOTIF_HDR parent;
  uint8_t payload[notif_payload];
} __attribute__((packed));



/**
 * Helper function to initialize commands
 *
 * \param[out] cmd Pointer to command structure to initialize
 * \param[in] id Command ID.  Refer to \ref AOC_COMMAND
 * \param[in] length Command length (size of the command structure)
 */
static inline void AocCmdHdrSet(struct CMD_HDR * cmd, uint16_t id, uint16_t length) {
  static uint8_t cmd_cntr_ = 0;

  cmd->parent.type = DATA_TYPE_CMD;
  cmd->parent.cntr = cmd_cntr_++;
  cmd->parent.len = length;
  cmd->id = id;
}


/**
 * Total number of UUID strings to check against the FW image.
 */
#define AOC_UUID_ENTRIES (77)

/**
 * UUID entry size.
 */
#define AOC_UUID_SIZE (16)


/**
 * Function to check interface compatibility
 *
 * \param[in] addr UUID table's address
 * \param[in] size UUID table's size
 *
 * \return 0 if compatibility is Ok, -1 otherwise
 */
inline int AocInterfaceCheck(const void * addr, int size) {
  static const uint8_t uuid_array[AOC_UUID_ENTRIES][AOC_UUID_SIZE] = { 
      { 0x04, 0xdc, 0xea, 0x06, 0x44, 0xf4, 0x79, 0xe8, 0xae, 0xe3, 0x3c, 0xcf, 0xa9, 0xdb, 0x91, 0x40},
      { 0x09, 0x8a, 0xe9, 0x75, 0x2b, 0x98, 0x8f, 0xea, 0xea, 0xb6, 0xe2, 0x1a, 0x86, 0xea, 0xc4, 0x64},
      { 0x0b, 0x0c, 0x41, 0x77, 0x05, 0x55, 0x41, 0xfb, 0x83, 0x1b, 0xab, 0xa5, 0x8e, 0x53, 0x6b, 0x47},
      { 0x14, 0x40, 0xb2, 0xd4, 0xa9, 0xef, 0xef, 0xbc, 0xef, 0xd3, 0xa6, 0xa1, 0x0e, 0x1e, 0x5a, 0x2f},
      { 0x16, 0x30, 0x9b, 0x66, 0x6d, 0x22, 0x6b, 0xaf, 0x0b, 0xac, 0xc2, 0x05, 0x41, 0xfe, 0x0a, 0xc7},
      { 0x18, 0x03, 0x63, 0xae, 0x9b, 0xed, 0x7e, 0x07, 0x21, 0x38, 0x74, 0x82, 0x23, 0x0a, 0xfd, 0x74},
      { 0x19, 0x14, 0x65, 0x0a, 0xa9, 0x1a, 0xf1, 0xba, 0xe7, 0xcc, 0xf3, 0xc8, 0x4e, 0x60, 0x64, 0xe0},
      { 0x20, 0x9c, 0x66, 0x93, 0xec, 0xcf, 0xe2, 0x76, 0x92, 0x7d, 0x47, 0x2c, 0x03, 0x59, 0x6a, 0x1a},
      { 0x21, 0x37, 0x7c, 0xe7, 0x18, 0xfd, 0x3e, 0x9b, 0xec, 0x88, 0x3f, 0x8f, 0xb4, 0x76, 0xc0, 0x56},
      { 0x26, 0x2e, 0x83, 0xbb, 0x0f, 0x9d, 0xca, 0xb3, 0x27, 0xc5, 0x87, 0x75, 0x4e, 0xdb, 0x5a, 0x05},
      { 0x26, 0x51, 0xc0, 0x6f, 0x1a, 0x78, 0x6a, 0x1d, 0x73, 0xea, 0xcd, 0x36, 0x84, 0x4b, 0x32, 0xb1},
      { 0x29, 0xff, 0x3e, 0x76, 0xc3, 0x31, 0x48, 0xcc, 0xdf, 0xd4, 0x93, 0xc2, 0x1f, 0x77, 0xf8, 0xb3},
      { 0x2a, 0x36, 0x61, 0x76, 0x5c, 0x52, 0x21, 0x06, 0x18, 0x05, 0x95, 0x22, 0xba, 0x0e, 0x31, 0xf2},
      { 0x30, 0xce, 0x5e, 0xae, 0x86, 0x0b, 0xa5, 0x23, 0x06, 0x60, 0xef, 0x73, 0x81, 0x09, 0x31, 0x41},
      { 0x31, 0x31, 0x68, 0xfa, 0x2e, 0xa1, 0xc2, 0x89, 0xec, 0x76, 0xe9, 0x83, 0xc2, 0x5d, 0x80, 0x11},
      { 0x31, 0x56, 0xc8, 0x7c, 0x32, 0x18, 0xd3, 0xf5, 0x95, 0x5d, 0x05, 0x8d, 0xf5, 0x60, 0x71, 0x5f},
      { 0x35, 0x8d, 0x93, 0xfd, 0xd9, 0x2d, 0xc7, 0x4f, 0xce, 0x25, 0xde, 0xc6, 0xff, 0xe5, 0x60, 0xe3},
      { 0x36, 0x7f, 0x8e, 0x21, 0x5b, 0x9a, 0xf1, 0x55, 0xd8, 0xfc, 0xd7, 0xb1, 0x63, 0x3a, 0x3b, 0xe8},
      { 0x3a, 0x5d, 0x28, 0x55, 0xd3, 0xf8, 0x1b, 0xa0, 0x6e, 0x40, 0x13, 0xb4, 0x20, 0x9e, 0xdf, 0x4a},
      { 0x3c, 0xa6, 0xbe, 0x15, 0xc8, 0x07, 0x87, 0x1e, 0x2f, 0x62, 0x72, 0xad, 0x79, 0xe9, 0x9c, 0x69},
      { 0x3d, 0x6c, 0x7b, 0x49, 0xfd, 0x7f, 0x78, 0xe7, 0x4c, 0x93, 0x79, 0x01, 0x88, 0xdd, 0x4d, 0x34},
      { 0x3f, 0xed, 0x66, 0x1e, 0x64, 0xb3, 0xe4, 0x05, 0x12, 0xeb, 0x47, 0x84, 0x99, 0xd4, 0x8c, 0x3d},
      { 0x41, 0xaa, 0x1c, 0xdd, 0x58, 0xf6, 0x25, 0x74, 0x34, 0x81, 0xfb, 0xa3, 0xb6, 0x05, 0x25, 0xf6},
      { 0x41, 0xd0, 0x01, 0x3e, 0x62, 0x4f, 0x5c, 0x67, 0x94, 0xa0, 0xf4, 0x56, 0x58, 0xa0, 0x7c, 0x4f},
      { 0x42, 0xd0, 0x98, 0xd9, 0x39, 0x91, 0x1d, 0xd5, 0x55, 0x13, 0x3c, 0xdc, 0x3e, 0x64, 0x7e, 0xe4},
      { 0x43, 0xed, 0xff, 0x9a, 0x17, 0xf0, 0x4b, 0x21, 0x4f, 0x00, 0xeb, 0xe1, 0x13, 0x8e, 0x4b, 0x3c},
      { 0x49, 0x5d, 0x16, 0x9c, 0xc2, 0x30, 0x49, 0x81, 0x61, 0x2c, 0x0a, 0x78, 0x8f, 0xa7, 0xb8, 0x72},
      { 0x4a, 0xad, 0xde, 0x38, 0x11, 0xf0, 0xeb, 0xc8, 0x24, 0xe4, 0x40, 0x8e, 0x10, 0x2f, 0x30, 0x77},
      { 0x4d, 0xe0, 0x29, 0x33, 0x2f, 0x3e, 0x41, 0xe7, 0xf4, 0xcf, 0x5a, 0xfc, 0x28, 0x40, 0x21, 0x2f},
      { 0x4f, 0xba, 0xf1, 0xd1, 0xe0, 0x21, 0x71, 0x9d, 0x3d, 0xde, 0x84, 0x33, 0xb4, 0x48, 0x1e, 0x55},
      { 0x51, 0x8f, 0x70, 0x7d, 0x7b, 0xce, 0xa8, 0x45, 0x77, 0xe6, 0x13, 0x76, 0x83, 0x50, 0x8c, 0x4e},
      { 0x52, 0xc0, 0xef, 0x37, 0x59, 0xbd, 0x0e, 0x93, 0x35, 0x3b, 0xbc, 0x3b, 0x6d, 0xed, 0x4a, 0xcf},
      { 0x53, 0x3c, 0x02, 0xd8, 0x64, 0xb8, 0x89, 0x51, 0x6f, 0x5b, 0xab, 0x76, 0xe6, 0x9d, 0xb9, 0x54},
      { 0x55, 0x9e, 0xff, 0x09, 0xb1, 0x1d, 0x37, 0xc9, 0xb6, 0xa2, 0x82, 0xdd, 0xd9, 0xe9, 0xc7, 0xb7},
      { 0x5b, 0xcb, 0x61, 0xee, 0x84, 0x92, 0x9d, 0x5b, 0xf5, 0x39, 0x57, 0x96, 0x8c, 0xda, 0xd9, 0x57},
      { 0x5d, 0x04, 0x63, 0x45, 0x0f, 0xd5, 0x12, 0xbe, 0x60, 0x5d, 0xb6, 0xb7, 0xec, 0x4f, 0x7d, 0x41},
      { 0x61, 0x15, 0x78, 0x19, 0x5c, 0xe8, 0x76, 0x33, 0xec, 0x89, 0x98, 0x69, 0xa4, 0x71, 0x6b, 0x48},
      { 0x67, 0x82, 0x09, 0x51, 0xd8, 0x6f, 0x53, 0xb0, 0xe3, 0x19, 0x2b, 0x70, 0x3a, 0x86, 0xea, 0xb1},
      { 0x6f, 0xf8, 0xa9, 0xe0, 0x24, 0x99, 0x04, 0xd2, 0x05, 0x9b, 0xb0, 0x69, 0xdf, 0xcd, 0x53, 0x57},
      { 0x70, 0x64, 0xf6, 0xf5, 0xd3, 0x7a, 0x75, 0x40, 0xa2, 0x66, 0xc3, 0x07, 0xfd, 0xad, 0x0a, 0x99},
      { 0x72, 0x14, 0x56, 0xc0, 0x71, 0x95, 0x53, 0x4d, 0xc4, 0xcb, 0xd0, 0x57, 0x0e, 0x49, 0xea, 0xb4},
      { 0x72, 0x65, 0x22, 0xd7, 0x5f, 0x3a, 0x82, 0xc2, 0x3e, 0x44, 0xbe, 0x70, 0xc9, 0x27, 0x38, 0xcf},
      { 0x73, 0x3b, 0x57, 0xb1, 0xd8, 0xa9, 0x34, 0x25, 0x23, 0xa4, 0x9b, 0x8c, 0x37, 0xad, 0x2d, 0x0a},
      { 0x74, 0x88, 0xed, 0xda, 0xbe, 0x06, 0x54, 0xe3, 0xf0, 0xac, 0x58, 0xcd, 0xa1, 0x7a, 0x15, 0x30},
      { 0x75, 0x47, 0x6c, 0xe4, 0x8e, 0xca, 0x1f, 0xa1, 0x68, 0x53, 0x17, 0x4d, 0x3e, 0x5a, 0x3a, 0x52},
      { 0x79, 0x50, 0x14, 0x99, 0x4a, 0x18, 0x99, 0x71, 0x55, 0x88, 0x49, 0x87, 0x2c, 0xb3, 0x0a, 0xd4},
      { 0x7a, 0x8d, 0x66, 0x7b, 0x99, 0x17, 0xf2, 0xc7, 0x58, 0x3d, 0xe0, 0x06, 0xd7, 0xb6, 0xdd, 0x40},
      { 0x7e, 0xf7, 0x2e, 0x02, 0xc1, 0x09, 0x09, 0xa5, 0x92, 0xa3, 0x2e, 0xf4, 0x82, 0x02, 0xe5, 0xb5},
      { 0x81, 0x29, 0xef, 0x7d, 0x8d, 0x52, 0xff, 0x74, 0x36, 0xc2, 0x61, 0xf3, 0x29, 0x1c, 0x1a, 0x84},
      { 0x83, 0xc7, 0xfd, 0x9b, 0xa4, 0x1a, 0x12, 0xea, 0xd4, 0x92, 0x0d, 0xdb, 0xe0, 0x2c, 0xe8, 0xfb},
      { 0x85, 0xb9, 0x18, 0x07, 0x1b, 0xa7, 0x30, 0xa9, 0xbf, 0xd3, 0x6c, 0xd8, 0xb4, 0xa9, 0x1d, 0x44},
      { 0x89, 0xc5, 0xed, 0x53, 0xae, 0x5d, 0x03, 0x75, 0x26, 0x35, 0x96, 0x8f, 0x20, 0xf4, 0xcd, 0xac},
      { 0x8b, 0xce, 0xad, 0x8e, 0xfa, 0xa3, 0xb8, 0x78, 0x4d, 0x1d, 0x2c, 0x06, 0xe5, 0xf7, 0x2b, 0x40},
      { 0x95, 0x00, 0x6b, 0x36, 0x78, 0x1e, 0x83, 0x30, 0xdf, 0x76, 0xb2, 0x7d, 0xda, 0xb3, 0x6a, 0x2b},
      { 0x95, 0xdc, 0x85, 0x87, 0x9c, 0xb5, 0x50, 0xea, 0xd2, 0x7b, 0x27, 0x1d, 0x15, 0xdf, 0x0c, 0x96},
      { 0x9b, 0x54, 0xa5, 0x5a, 0x67, 0x52, 0xb4, 0xd1, 0x7d, 0xf8, 0x89, 0xad, 0x5a, 0x1c, 0xec, 0xe4},
      { 0x9b, 0xc0, 0xd0, 0xaa, 0xe8, 0xea, 0x65, 0x71, 0xf7, 0x8f, 0x88, 0x18, 0x64, 0x3e, 0xc2, 0x30},
      { 0x9e, 0x3c, 0x06, 0xed, 0xcc, 0x10, 0xe0, 0x9a, 0x28, 0xe4, 0xaa, 0xdb, 0x81, 0x5e, 0x24, 0xaf},
      { 0xa3, 0xe5, 0xf1, 0x0b, 0xd8, 0x87, 0x39, 0xe9, 0x41, 0xe9, 0x3b, 0x10, 0x2c, 0x59, 0x3e, 0xaa},
      { 0xa7, 0xf4, 0x8e, 0xda, 0x02, 0x1a, 0x72, 0xf2, 0x84, 0xeb, 0x21, 0x19, 0xd6, 0x55, 0xe6, 0xbd},
      { 0xa9, 0x51, 0xb4, 0xa0, 0x1f, 0x7e, 0xb0, 0x33, 0xe7, 0x74, 0xac, 0x7f, 0xb7, 0xc7, 0xd5, 0xe0},
      { 0xb4, 0x21, 0xdc, 0x50, 0xc6, 0xc2, 0x7f, 0x91, 0x78, 0x94, 0x8f, 0x67, 0x78, 0x4c, 0x80, 0x70},
      { 0xb9, 0x16, 0x15, 0xa0, 0x0e, 0x45, 0xeb, 0xe6, 0xc9, 0xca, 0x5e, 0x3d, 0x03, 0x5d, 0xca, 0xd8},
      { 0xb9, 0x47, 0xfb, 0xe0, 0x09, 0x44, 0xaf, 0x18, 0xee, 0x6e, 0xca, 0xc0, 0x2e, 0xed, 0xe9, 0x64},
      { 0xbc, 0xbd, 0xf2, 0x41, 0x68, 0x81, 0x07, 0xee, 0x0b, 0xf0, 0xec, 0x9b, 0xfd, 0xae, 0xa1, 0x8b},
      { 0xbf, 0x84, 0xe2, 0xbc, 0xa7, 0x2f, 0x62, 0xc6, 0x37, 0x0a, 0x1f, 0x02, 0x6c, 0xfd, 0x0e, 0x35},
      { 0xc6, 0x82, 0x2f, 0xf0, 0x82, 0x77, 0xed, 0xf3, 0x69, 0xc9, 0xe5, 0xdc, 0xb0, 0x8d, 0x0d, 0x5c},
      { 0xcf, 0x07, 0x4c, 0xe3, 0x0f, 0x09, 0x0f, 0xdb, 0xea, 0x26, 0xbd, 0xa0, 0x0b, 0xfb, 0xe6, 0x86},
      { 0xd2, 0x02, 0xa4, 0x61, 0x74, 0xe5, 0x85, 0x44, 0x09, 0x3a, 0x88, 0xda, 0x00, 0xa6, 0x5d, 0xe8},
      { 0xd5, 0xa3, 0x32, 0x66, 0x91, 0xd5, 0x64, 0x96, 0x76, 0x0b, 0x90, 0x05, 0xb6, 0xad, 0x9e, 0x70},
      { 0xd6, 0x61, 0x20, 0xba, 0x45, 0x15, 0x28, 0x76, 0x6e, 0x36, 0x56, 0x07, 0x93, 0x65, 0xe0, 0x83},
      { 0xda, 0xd7, 0x8a, 0x1c, 0x8f, 0x2e, 0xac, 0x50, 0xec, 0x71, 0xfb, 0x18, 0x86, 0x39, 0xb4, 0x17},
      { 0xdf, 0x12, 0x24, 0x79, 0x68, 0x55, 0x51, 0xec, 0x11, 0xc0, 0xe9, 0xd0, 0x27, 0x25, 0x1a, 0x2e},
      { 0xe7, 0x7e, 0x8e, 0x20, 0x72, 0x02, 0xf6, 0x09, 0x5d, 0xc7, 0x35, 0x29, 0x6f, 0x6c, 0x17, 0xaf},
      { 0xf4, 0xeb, 0x52, 0x39, 0xe2, 0x7e, 0x5b, 0x94, 0xd2, 0x22, 0xca, 0xc7, 0x78, 0x7c, 0x0e, 0xc7},
      { 0xf5, 0x62, 0x46, 0x0d, 0x3f, 0x81, 0xd1, 0x65, 0xb9, 0x5b, 0x6f, 0x33, 0x5d, 0xef, 0xb6, 0x0f},
      { 0xf6, 0x6b, 0xc3, 0x3c, 0x61, 0xb9, 0x14, 0x08, 0x43, 0xf1, 0x01, 0x6d, 0x50, 0xb4, 0x68, 0xc5},
    };
  int start = 0;
  int last = size / AOC_UUID_SIZE;
  int entry;
  int rc = 0;

  /*
   * The UUIDs entries are sorted therefore moving the start of the
   * inner loop is enough to minimize the search checks
   */

  for (entry = 0; entry < AOC_UUID_ENTRIES; entry++) {
    const uint8_t * uuid = &(uuid_array[entry][0]);
    int index;

    rc = -1;

    for (index = start; index < last; index += 1) {
      const uint8_t * ptr;
      int j;

      ptr = &(((const uint8_t *)addr)[index * AOC_UUID_SIZE]);

      for (j = 0; j < AOC_UUID_SIZE; j++) {
        if (uuid[j] != ptr[j]) {
          break;
        }
      }
      if (j == AOC_UUID_SIZE) {
        if (index == start) {
          start += 1;
        }
        rc = 0;
        break;
      }
    }
    if (index == last) {
      rc = -1;
      break;
    }
  }
  return rc;
}


#endif /* AOC_INTERFACE_H_ */

